#include <emscripten/bind.h>
#include <ARWrapper/ARController.h>

using namespace emscripten;

EMSCRIPTEN_BINDINGS(constant_bindings) {

	function("setMatrixCodeType", &setMatrixCodeType);
	function("setup", &setup);
	function("setPatternDetectionMode", &setPatternDetectionMode);

	// class_<ARController>("ARController")
	// 	.function("getARToolKitVersion", &ARController::getARToolKitVersion)
	// 	.function("setDebugMode", &ARController::setDebugMode)
	// 	.function("setImageProcMode", &ARController::setImageProcMode)
	// ;

	// enum_<AR_MATRIX_CODE_TYPE>("AR_MATRIX_CODE_TYPE")
	// 	.value("AR_MATRIX_CODE_3x3", AR_MATRIX_CODE_3x3)
	// 	.value("AR_MATRIX_CODE_3x3_HAMMING63", AR_MATRIX_CODE_3x3_HAMMING63)
	// 	.value("AR_MATRIX_CODE_3x3_PARITY65", AR_MATRIX_CODE_3x3_PARITY65)
	// 	.value("AR_MATRIX_CODE_4x4", AR_MATRIX_CODE_4x4)
	// 	.value("AR_MATRIX_CODE_4x4_BCH_13_9_3", AR_MATRIX_CODE_4x4_BCH_13_9_3)
	// 	.value("AR_MATRIX_CODE_4x4_BCH_13_5_5", AR_MATRIX_CODE_4x4_BCH_13_5_5)
	// ;

	// enum_<AR_LABELING_THRESH_MODE>("AR_LABELING_THRESH_MODE")
	// 	.value("AR_LABELING_THRESH_MODE_MANUAL", AR_LABELING_THRESH_MODE_MANUAL)
	// 	.value("AR_LABELING_THRESH_MODE_AUTO_MEDIAN", AR_LABELING_THRESH_MODE_AUTO_MEDIAN)
	// 	.value("AR_LABELING_THRESH_MODE_AUTO_OTSU", AR_LABELING_THRESH_MODE_AUTO_OTSU)
	// 	.value("AR_LABELING_THRESH_MODE_AUTO_ADAPTIVE", AR_LABELING_THRESH_MODE_AUTO_ADAPTIVE)
	// ;


	// enum_<AR_MARKER_INFO_CUTOFF_PHASE>("AR_MARKER_INFO_CUTOFF_PHASE")
	// 	.value("AR_MARKER_INFO_CUTOFF_PHASE_NONE", AR_MARKER_INFO_CUTOFF_PHASE_NONE)
	// 	.value("AR_MARKER_INFO_CUTOFF_PHASE_PATTERN_EXTRACTION", AR_MARKER_INFO_CUTOFF_PHASE_PATTERN_EXTRACTION)
	// 	.value("AR_MARKER_INFO_CUTOFF_PHASE_MATCH_GENERIC", AR_MARKER_INFO_CUTOFF_PHASE_MATCH_GENERIC)
	// 	.value("AR_MARKER_INFO_CUTOFF_PHASE_MATCH_CONTRAST", AR_MARKER_INFO_CUTOFF_PHASE_MATCH_CONTRAST)
	// 	.value("AR_MARKER_INFO_CUTOFF_PHASE_MATCH_BARCODE_NOT_FOUND", AR_MARKER_INFO_CUTOFF_PHASE_MATCH_BARCODE_NOT_FOUND)
	// 	.value("AR_MARKER_INFO_CUTOFF_PHASE_MATCH_BARCODE_EDC_FAIL", AR_MARKER_INFO_CUTOFF_PHASE_MATCH_BARCODE_EDC_FAIL)
	// 	.value("AR_MARKER_INFO_CUTOFF_PHASE_MATCH_CONFIDENCE", AR_MARKER_INFO_CUTOFF_PHASE_MATCH_CONFIDENCE)
	// 	.value("AR_MARKER_INFO_CUTOFF_PHASE_POSE_ERROR", AR_MARKER_INFO_CUTOFF_PHASE_POSE_ERROR)
	// 	.value("AR_MARKER_INFO_CUTOFF_PHASE_POSE_ERROR_MULTI", AR_MARKER_INFO_CUTOFF_PHASE_POSE_ERROR_MULTI)
	// 	.value("AR_MARKER_INFO_CUTOFF_PHASE_HEURISTIC_TROUBLESOME_MATRIX_CODES", AR_MARKER_INFO_CUTOFF_PHASE_HEURISTIC_TROUBLESOME_MATRIX_CODES)
	// ;

	/* arDebug */
	constant("AR_DEBUG_DISABLE", AR_DEBUG_DISABLE);
	constant("AR_DEBUG_ENABLE", AR_DEBUG_ENABLE);
	constant("AR_DEFAULT_DEBUG_MODE", AR_DEFAULT_DEBUG_MODE);

	/* arLabelingMode */
	constant("AR_LABELING_WHITE_REGION", AR_LABELING_WHITE_REGION);
	constant("AR_LABELING_BLACK_REGION", AR_LABELING_BLACK_REGION);
	constant("AR_DEFAULT_LABELING_MODE", AR_DEFAULT_LABELING_MODE);

	/* for arlabelingThresh */
	constant("AR_DEFAULT_LABELING_THRESH", AR_DEFAULT_LABELING_THRESH);

	/* for arImageProcMode */
	constant("AR_IMAGE_PROC_FRAME_IMAGE", AR_IMAGE_PROC_FRAME_IMAGE);
	constant("AR_IMAGE_PROC_FIELD_IMAGE", AR_IMAGE_PROC_FIELD_IMAGE);
	constant("AR_DEFAULT_IMAGE_PROC_MODE", AR_DEFAULT_IMAGE_PROC_MODE);

	/* for arPatternDetectionMode */
	constant("AR_TEMPLATE_MATCHING_COLOR", AR_TEMPLATE_MATCHING_COLOR);
	constant("AR_TEMPLATE_MATCHING_MONO", AR_TEMPLATE_MATCHING_MONO);
	constant("AR_MATRIX_CODE_DETECTION", AR_MATRIX_CODE_DETECTION);
	constant("AR_TEMPLATE_MATCHING_COLOR_AND_MATRIX", AR_TEMPLATE_MATCHING_COLOR_AND_MATRIX);
	constant("AR_TEMPLATE_MATCHING_MONO_AND_MATRIX", AR_TEMPLATE_MATCHING_MONO_AND_MATRIX);
	constant("AR_DEFAULT_PATTERN_DETECTION_MODE", AR_DEFAULT_PATTERN_DETECTION_MODE);

	/* for arMarkerExtractionMode */
	constant("AR_USE_TRACKING_HISTORY", AR_USE_TRACKING_HISTORY);
	constant("AR_NOUSE_TRACKING_HISTORY", AR_NOUSE_TRACKING_HISTORY);
	constant("AR_USE_TRACKING_HISTORY_V2", AR_USE_TRACKING_HISTORY_V2);
	constant("AR_DEFAULT_MARKER_EXTRACTION_MODE", AR_DEFAULT_MARKER_EXTRACTION_MODE);

	/* for arGetTransMat */
	constant("AR_MAX_LOOP_COUNT", AR_MAX_LOOP_COUNT);
	constant("AR_LOOP_BREAK_THRESH", AR_LOOP_BREAK_THRESH);
}